name: üß± Build DLL & release (Windows)

env:
    PLUGIN_NAME: CustomBallOnline
    TAG_NAME: ${{ github.event.inputs.tag || github.ref_name }}

on:
    push:
        tags:
            - "v*.*.*"
    workflow_dispatch:
        inputs:
            tag:
                description: "Release tag (e.g. v1.0.1)"
                required: true
permissions:
    contents: write

jobs:
    check-changelog:
        name: Check changelog (main)
        runs-on: windows-latest
        outputs:
            changelog: ${{ steps.changelog.outputs.changelog }}
        steps:
            - name: üì• Checkout repository (main)
              uses: actions/checkout@v4
              with:
                  ref: main
                  submodules: false

            - name: üìù Extract changes from changelog
              id: changelog
              shell: bash
              run: |
                  # Prefer manual input if available
                  TAG="${{ github.event.inputs.tag || github.ref_name }}"

                  # fail if tag not found in CHANGELOG.md
                  if ! grep -q "^## $TAG" CHANGELOG.md; then
                    echo "‚ùå Tag '$TAG' not found in CHANGELOG.md"
                    exit 1
                  fi

                  echo "Using tag: $TAG"

                  NOTES=$(awk "/^## $TAG/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md)

                  echo "Extracted notes:"
                  echo "$NOTES"

                  {
                    echo "changelog<<EOF"
                    echo "$NOTES"
                    echo "EOF"
                  } >> "$GITHUB_OUTPUT"

    build:
        name: Build holy version (main)
        needs: check-changelog
        runs-on: windows-latest

        steps:
            - name: üì• Checkout repository (main)
              uses: actions/checkout@v4
              with:
                  ref: main
                  submodules: false

            - name: üçÜ Initialize submodules
              run: ./scripts/init-submodules.bat

            - name: ü•∑ Set up Ninja
              uses: ashutoshvarma/setup-ninja@v1

            - name: üß± Configure project (CMake)
              run: cmake --preset windows-x64-msvc

            - name: üî® Build project (CMake + Ninja)
              # run: cmake --build build --config RelWithDebInfo
              run: cmake --build build

            - name: ü•µ Prepare artifact files (main)
              shell: bash
              run: |
                  7z a source.zip * -xr!README.md -xr!build -xr!plugins -xr!scripts -xr!assets -xr!.git
                  mkdir -p dist temp/debug temp/installation_zip
                  mv ./source.zip temp/debug
                  cp ./plugins/*.dll temp/installation_zip
                  mv ./scripts/install.bat temp/installation_zip
                  mv ./plugins/*.dll temp/debug
                  mv ./plugins/*.pdb temp/debug
                  7z a "dist/${{ env.PLUGIN_NAME }}.zip" ./temp/installation_zip/*
                  7z a dist/debug.zip ./temp/debug/*

            - name: üì¶ Upload build artifacts (main)
              uses: actions/upload-artifact@v4
              with:
                  name: main-artifacts
                  path: dist/*

    build-ac-version:
        name: Build inferior version (ac-version)
        needs: check-changelog
        runs-on: windows-latest
        steps:
            - name: üì• Checkout repository (ac-version)
              uses: actions/checkout@v4
              with:
                  ref: ac-version
                  submodules: false

            - name: üçÜ Initialize submodules
              run: ./scripts/init-submodules.bat

            - name: üõ†Ô∏è Set up MSBuild
              uses: microsoft/setup-msbuild@v2

            - name: üî® Build solution
              run: msbuild ${{ env.PLUGIN_NAME }}.sln /p:Configuration=Release /p:Platform=x64

            - name: ü•µ Prepare artifact files (ac-version)
              shell: bash
              run: |
                  7z a source.zip * -xr!README.md -xr!build -xr!plugins -xr!scripts -xr!assets -xr!.git
                  mkdir -p dist temp/debug temp/installation_zip
                  mv ./source.zip temp/debug
                  cp ./plugins/*.dll temp/installation_zip
                  mv ./scripts/install.bat temp/installation_zip
                  mv ./plugins/*.dll temp/debug
                  mv ./plugins/*.pdb temp/debug
                  7z a "dist/${{ env.PLUGIN_NAME }}-AC.zip" ./temp/installation_zip/*
                  7z a dist/debug-AC.zip ./temp/debug/*

            - name: üì¶ Upload build artifacts (ac-version)
              uses: actions/upload-artifact@v4
              with:
                  name: ac-version-artifacts
                  path: dist\*

    release:
        needs: [check-changelog, build, build-ac-version]
        runs-on: windows-latest
        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: ./artifacts
                  merge-multiple: true # <--- FLATTENS all artifacts into ./artifacts

            - name: üß™ Check downloaded artifacts
              shell: bash
              run: |
                  echo "Contents of artifacts folder:"
                  find artifacts -type f

            - name: üöÄ Create release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ env.TAG_NAME }}
                  body: |
                      ## Install Steps
                      1. Close Rocket League

                      2. Click `CustomBallOnline.zip` or `CustomBallOnline-AC.zip` below to download it
                          - `CustomBallOnline.zip` is a superior version for people who don't use AlphaConsole
                          - `CustomBallOnline-AC.zip` is for people who use AlphaConsole

                      3. Extract the `.zip` file and run `install.bat`

                      ## Notes
                      ${{ needs.check-changelog.outputs.changelog }}
                  files: artifacts/*.zip
